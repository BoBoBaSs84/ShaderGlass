/*
ShaderGlass shader subframe-bfi-shaders\120hz-safe-BFI imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/23046258f7fd02242cc6dd4c08c997a8ddb84935/subframe-bfi/shaders/120hz-safe-BFI.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// 120 Hz non-voltage-accumulating BFI
// by hunterk
// license: public domain
// The current cadence, which we store from frame to frame.
// How often to flip the cadence of the BFI. Default is 1 min, assuming 60 frames per second, but can be reduced/extended.
// Flip the cadence whenever the timer rolls over.
// The BFI tick oscillates between 0 and 1. TODO/FIXME: make this work with arbitrary total subframe values (or, at least evenly numbered ones)
// sample the image
// Store the cadence in the alpha channel where it won't cause any trouble

*/

#pragma once

namespace RetroArchSubframeBfiShaders120hzSafeBFIShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,202,204,
197,124,146,79,215,56,
151,55,37,119,42,41,
207,24,1,0,0,0,
4,6,0,0,5,0,
0,0,52,0,0,0,
180,3,0,0,0,4,
0,0,88,4,0,0,
104,5,0,0,82,68,
69,70,120,3,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
79,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,10,0,
0,0,120,0,0,0,
160,0,0,0,0,0,
0,0,0,0,0,0,
8,2,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,28,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,64,2,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,92,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,128,2,0,0,
80,0,0,0,16,0,
0,0,0,0,0,0,
92,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
148,2,0,0,96,0,
0,0,16,0,0,0,
0,0,0,0,92,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,166,2,
0,0,112,0,0,0,
16,0,0,0,0,0,
0,0,92,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,191,2,0,0,
128,0,0,0,4,0,
0,0,0,0,0,0,
216,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
252,2,0,0,132,0,
0,0,4,0,0,0,
0,0,0,0,216,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,18,3,
0,0,136,0,0,0,
4,0,0,0,0,0,
0,0,216,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,41,3,0,0,
140,0,0,0,4,0,
0,0,0,0,0,0,
216,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
63,3,0,0,144,0,
0,0,4,0,0,0,
0,0,0,0,216,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,19,2,0,0,
103,108,111,98,97,108,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
82,2,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
103,108,111,98,97,108,
95,79,117,116,112,117,
116,83,105,122,101,0,
103,108,111,98,97,108,
95,70,105,110,97,108,
86,105,101,119,112,111,
114,116,83,105,122,101,
0,103,108,111,98,97,
108,95,70,114,97,109,
101,67,111,117,110,116,
0,100,119,111,114,100,
0,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,209,2,
0,0,103,108,111,98,
97,108,95,70,114,97,
109,101,68,105,114,101,
99,116,105,111,110,0,
103,108,111,98,97,108,
95,67,117,114,114,101,
110,116,83,117,98,70,
114,97,109,101,0,103,
108,111,98,97,108,95,
84,111,116,97,108,83,
117,98,70,114,97,109,
101,115,0,103,108,111,
98,97,108,95,82,111,
116,97,116,105,111,110,
0,77,105,99,114,111,
115,111,102,116,32,40,
82,41,32,72,76,83,
76,32,83,104,97,100,
101,114,32,67,111,109,
112,105,108,101,114,32,
49,48,46,49,0,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,15,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,80,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,12,
0,0,65,0,0,0,
0,0,0,0,1,0,
0,0,3,0,0,0,
1,0,0,0,15,0,
0,0,84,69,88,67,
79,79,82,68,0,83,
86,95,80,111,115,105,
116,105,111,110,0,171,
171,171,83,72,69,88,
8,1,0,0,80,0,
1,0,66,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,4,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,103,0,0,4,
242,32,16,0,1,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,54,0,0,5,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
6,0,0,0,1,0,
0,0,0,0,0,0,
4,0,0,0,4,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,206,61,
165,72,214,1,94,235,
254,189,3,157,254,183,
97,92,1,0,0,0,
132,9,0,0,5,0,
0,0,52,0,0,0,
80,5,0,0,132,5,
0,0,184,5,0,0,
232,8,0,0,82,68,
69,70,20,5,0,0,
2,0,0,0,68,1,
0,0,6,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
236,4,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
252,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,12,1,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,35,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
2,0,0,0,1,0,
0,0,13,0,0,0,
42,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,3,0,0,0,
1,0,0,0,13,0,
0,0,56,1,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,60,1,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,95,80,
97,115,115,70,101,101,
100,98,97,99,107,48,
95,115,97,109,112,108,
101,114,0,83,111,117,
114,99,101,0,80,97,
115,115,70,101,101,100,
98,97,99,107,48,0,
85,66,79,0,80,117,
115,104,0,171,171,171,
56,1,0,0,10,0,
0,0,116,1,0,0,
160,0,0,0,0,0,
0,0,0,0,0,0,
60,1,0,0,2,0,
0,0,76,4,0,0,
16,0,0,0,0,0,
0,0,0,0,0,0,
4,3,0,0,0,0,
0,0,64,0,0,0,
0,0,0,0,24,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,60,3,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,88,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,124,3,0,0,
80,0,0,0,16,0,
0,0,0,0,0,0,
88,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
144,3,0,0,96,0,
0,0,16,0,0,0,
0,0,0,0,88,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,162,3,
0,0,112,0,0,0,
16,0,0,0,0,0,
0,0,88,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,187,3,0,0,
128,0,0,0,4,0,
0,0,2,0,0,0,
212,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
248,3,0,0,132,0,
0,0,4,0,0,0,
0,0,0,0,212,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,14,4,
0,0,136,0,0,0,
4,0,0,0,2,0,
0,0,212,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,37,4,0,0,
140,0,0,0,4,0,
0,0,0,0,0,0,
212,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
59,4,0,0,144,0,
0,0,4,0,0,0,
0,0,0,0,212,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,15,3,0,0,
103,108,111,98,97,108,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
78,3,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
103,108,111,98,97,108,
95,79,117,116,112,117,
116,83,105,122,101,0,
103,108,111,98,97,108,
95,70,105,110,97,108,
86,105,101,119,112,111,
114,116,83,105,122,101,
0,103,108,111,98,97,
108,95,70,114,97,109,
101,67,111,117,110,116,
0,100,119,111,114,100,
0,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,205,3,
0,0,103,108,111,98,
97,108,95,70,114,97,
109,101,68,105,114,101,
99,116,105,111,110,0,
103,108,111,98,97,108,
95,67,117,114,114,101,
110,116,83,117,98,70,
114,97,109,101,0,103,
108,111,98,97,108,95,
84,111,116,97,108,83,
117,98,70,114,97,109,
101,115,0,103,108,111,
98,97,108,95,82,111,
116,97,116,105,111,110,
0,171,156,4,0,0,
0,0,0,0,4,0,
0,0,2,0,0,0,
180,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
216,4,0,0,4,0,
0,0,4,0,0,0,
2,0,0,0,180,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,100,
101,97,100,108,105,110,
101,0,102,108,111,97,
116,0,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
172,4,0,0,112,97,
114,97,109,115,95,100,
101,98,117,103,95,116,
111,103,103,108,101,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,40,3,
0,0,80,0,0,0,
202,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,9,0,0,0,
89,0,0,4,70,142,
32,0,1,0,0,0,
1,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,90,0,
0,3,0,96,16,0,
3,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,88,24,0,4,
0,112,16,0,3,0,
0,0,85,85,0,0,
98,16,0,3,50,16,
16,0,0,0,0,0,
101,0,0,3,242,32,
16,0,0,0,0,0,
104,0,0,2,2,0,
0,0,86,0,0,6,
18,0,16,0,0,0,
0,0,10,128,32,0,
0,0,0,0,8,0,
0,0,56,0,0,8,
34,0,16,0,0,0,
0,0,1,64,0,0,
0,0,97,69,10,128,
32,0,1,0,0,0,
0,0,0,0,14,0,
0,7,66,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,65,0,0,5,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,50,0,
0,10,18,0,16,0,
0,0,0,0,26,0,
16,128,65,0,0,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,27,0,0,5,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,69,0,
0,142,194,0,0,128,
67,85,21,0,34,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,198,121,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
24,0,0,7,66,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,1,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,55,0,0,9,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,57,0,0,7,
34,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,0,
30,0,0,8,66,0,
16,0,0,0,0,0,
1,64,0,0,255,255,
255,255,42,128,32,0,
0,0,0,0,8,0,
0,0,86,0,0,5,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,51,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,24,0,0,7,
130,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,0,
1,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,55,0,
0,9,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
56,0,0,7,226,0,
16,0,0,0,0,0,
86,5,16,0,0,0,
0,0,6,9,16,0,
1,0,0,0,57,0,
0,8,18,0,16,0,
1,0,0,0,1,64,
0,0,0,0,0,0,
26,128,32,0,1,0,
0,0,0,0,0,0,
55,0,0,9,114,32,
16,0,0,0,0,0,
6,0,16,0,1,0,
0,0,6,0,16,0,
0,0,0,0,150,7,
16,0,0,0,0,0,
54,0,0,5,130,32,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,23,0,0,0,
2,0,0,0,0,0,
0,0,2,0,0,0,
10,0,0,0,1,0,
0,0,2,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};

}

namespace RetroArch
{
class SubframeBfiShaders120hzSafeBFIShaderDef : public ShaderDef
{
public:
	SubframeBfiShaders120hzSafeBFIShaderDef() : ShaderDef{}
	{
		Name = "120hz-safe-BFI";
		VertexByteCode = RetroArchSubframeBfiShaders120hzSafeBFIShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchSubframeBfiShaders120hzSafeBFIShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchSubframeBfiShaders120hzSafeBFIShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchSubframeBfiShaders120hzSafeBFIShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("deadline", -1, 0, 4, 0.250000f, 10.000000f, 1.000000f, 0.250000f, "Max Cadence Flip Interval (in min)"));
		Params.push_back(ShaderParam("debug_toggle", -1, 4, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Debug (show only cadence swaps)"));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", 0, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", 0, 80, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", 0, 96, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", 0, 128, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FinalViewportSize", 0, 112, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameDirection", 0, 132, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("CurrentSubFrame", 0, 136, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("TotalSubFrames", 0, 140, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("Rotation", 0, 144, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("PassFeedback0", 3));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
