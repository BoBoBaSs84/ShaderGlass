/*
ShaderGlass shader reshade-shaders-magicbloom\magicbloom_blur_pass_5 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/6f921ee4815a7894a33855974285b04545a4fa42/reshade/shaders/magicbloom/magicbloom_blur_pass_5.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.


Magic Bloom by luluco250
See .inc file for more info


Magic Bloom by luluco250
Attempts to simulate a natural-looking bloom.
Features:
--Wide bloom blurring, derived from the gaussian function
defined here: https://en.wikipedia.org/wiki/Gaussian_blur#Mathematics
--Eye adaptation, decreases or increases the brightness
of bloom according to the overall image luminance.
--Lens dirt, as standard I suppose. Really not much here.
It uses an image named "MagicBloom_Dirt.png" so make
sure you have one in your textures directory.
--Unwanted features can be disabled through
preprocessor definitions, saving performance.

Preprocessor definitions:
--MAGICBLOOM_ADAPT_RESOLUTION:
Determines the width/height of the texture used for adaptation.
It is recommended to use 256, but you can use as far as 1024 without issues.
Too low resolutions will make adaptation seem "unstable".
Must be a power of two value: 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 etc.
--MAGICBLOOM_BLUR_PRECALCULATED:
If set to 0 the gaussian blur will be calculated inside the shader.
Otherwise, it uses a pre-calculated kernel (array).

--MAGICBLOOM_NODIRT:
If set to 1 all lens dirt related features are disabled.
Beneficial for performance if you don't wish to use lens dirt.
--MAGICBLOOM_NOADAPT:
If set to 1 all adaptation related features are disabled.
Beneficial for performance if you don't wish to use adaptation.
MIT Licensed:
Copyright (c) 2017 luluco250
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

//Statics
// #define CONST_LOG2(v) (((v) & 0xAAAAAAAA) != 0) | ((((v) & 0xFFFF0000) != 0) << 4) | ((((v) & 0xFF00FF00) != 0) << 3) | ((((v) & 0xF0F0F0F0) != 0) << 2) | ((((v) & 0xCCCCCCCC) != 0) << 1)
//Functions
//Why use a single-pass blur? To reduce the amount of textures used in half.
//Scale should be the original resolution divided by target resolution.
// [unroll]

*/

#pragma once

namespace RetroArchReshadeShadersMagicbloomMagicbloom_blur_pass_5ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,14,47,
213,78,221,130,191,191,
97,225,117,245,226,84,
11,43,1,0,0,0,
160,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
4,3,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,28,1,
0,0,80,0,1,0,
71,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
56,0,0,10,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,2,64,0,0,
84,0,128,63,84,0,
128,63,0,0,0,0,
0,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
6,0,0,0,1,0,
0,0,0,0,0,0,
4,0,0,0,5,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,53,100,
117,172,12,224,217,145,
55,115,217,1,147,84,
219,6,1,0,0,0,
36,8,0,0,5,0,
0,0,52,0,0,0,
96,3,0,0,148,3,
0,0,200,3,0,0,
136,7,0,0,82,68,
69,70,36,3,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
250,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,7,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,232,1,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,4,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,40,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
4,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
60,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,4,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,78,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,104,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,140,2,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
172,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
208,2,0,0,56,0,
0,0,4,0,0,0,
0,0,0,0,172,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,232,2,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,172,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,250,1,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,70,114,97,
109,101,67,111,117,110,
116,0,100,119,111,114,
100,0,171,171,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
96,2,0,0,112,97,
114,97,109,115,95,102,
66,108,111,111,109,95,
73,110,116,101,110,115,
105,116,121,0,102,108,
111,97,116,0,171,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,164,2,0,0,
112,97,114,97,109,115,
95,102,66,108,111,111,
109,95,84,104,114,101,
115,104,111,108,100,0,
112,97,114,97,109,115,
95,65,112,112,108,121,
66,108,111,111,109,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,171,171,
73,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,0,
0,0,83,86,95,84,
97,114,103,101,116,0,
171,171,83,72,69,88,
184,3,0,0,80,0,
0,0,238,0,0,0,
106,8,0,1,53,24,
0,0,38,0,0,0,
171,37,221,60,0,0,
0,0,0,0,0,0,
0,0,0,0,67,160,
132,61,0,0,0,0,
0,0,0,0,0,0,
0,0,252,198,247,61,
0,0,0,0,0,0,
0,0,0,0,0,0,
255,65,52,62,0,0,
0,0,0,0,0,0,
0,0,0,0,32,66,
76,62,0,0,0,0,
0,0,0,0,0,0,
0,0,255,65,52,62,
0,0,0,0,0,0,
0,0,0,0,0,0,
252,198,247,61,0,0,
0,0,0,0,0,0,
0,0,0,0,67,160,
132,61,0,0,0,0,
0,0,0,0,0,0,
0,0,171,37,221,60,
0,0,0,0,0,0,
0,0,0,0,0,0,
89,0,0,4,70,142,
32,0,1,0,0,0,
4,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
5,0,0,0,29,0,
0,8,18,0,16,0,
0,0,0,0,58,128,
32,0,1,0,0,0,
3,0,0,0,1,64,
0,0,0,0,128,63,
31,0,4,3,10,0,
16,0,0,0,0,0,
56,0,0,11,50,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
128,65,0,0,128,65,
0,0,0,0,0,0,
0,0,230,138,32,0,
1,0,0,0,2,0,
0,0,54,0,0,8,
114,0,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,54,0,
0,5,66,0,16,0,
0,0,0,0,1,64,
0,0,252,255,255,255,
48,0,0,1,34,0,
0,7,130,0,16,0,
0,0,0,0,1,64,
0,0,4,0,0,0,
42,0,16,0,0,0,
0,0,3,0,4,3,
58,0,16,0,0,0,
0,0,30,0,0,10,
50,0,16,0,2,0,
0,0,166,10,16,0,
0,0,0,0,2,64,
0,0,4,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
43,0,0,5,18,0,
16,0,3,0,0,0,
42,0,16,0,0,0,
0,0,54,0,0,5,
114,0,16,0,4,0,
0,0,70,2,16,0,
1,0,0,0,54,0,
0,5,130,0,16,0,
0,0,0,0,1,64,
0,0,252,255,255,255,
48,0,0,1,34,0,
0,7,130,0,16,0,
1,0,0,0,1,64,
0,0,4,0,0,0,
58,0,16,0,0,0,
0,0,3,0,4,3,
58,0,16,0,1,0,
0,0,30,0,0,10,
194,0,16,0,2,0,
0,0,246,15,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,4,0,
0,0,1,0,0,0,
56,0,0,9,130,0,
16,0,1,0,0,0,
10,144,144,0,42,0,
16,0,2,0,0,0,
10,144,144,0,10,0,
16,0,2,0,0,0,
43,0,0,5,34,0,
16,0,3,0,0,0,
58,0,16,0,0,0,
0,0,50,0,0,9,
98,0,16,0,3,0,
0,0,6,1,16,0,
0,0,0,0,6,1,
16,0,3,0,0,0,
6,17,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,226,0,16,0,
3,0,0,0,150,5,
16,0,3,0,0,0,
54,121,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,50,0,
0,9,114,0,16,0,
4,0,0,0,150,7,
16,0,3,0,0,0,
246,15,16,0,1,0,
0,0,70,2,16,0,
4,0,0,0,54,0,
0,5,130,0,16,0,
0,0,0,0,58,0,
16,0,2,0,0,0,
22,0,0,1,54,0,
0,5,114,0,16,0,
1,0,0,0,70,2,
16,0,4,0,0,0,
54,0,0,5,66,0,
16,0,0,0,0,0,
26,0,16,0,2,0,
0,0,22,0,0,1,
56,0,0,10,114,32,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,2,64,0,0,
180,2,131,63,180,2,
131,63,180,2,131,63,
0,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
18,0,0,1,54,0,
0,8,242,32,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
21,0,0,1,62,0,
0,1,83,84,65,84,
148,0,0,0,32,0,
0,0,5,0,0,0,
9,0,0,0,2,0,
0,0,6,0,0,0,
4,0,0,0,0,0,
0,0,2,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,9,0,0,0,
0,0,0,0,2,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};

}

namespace RetroArch
{
class ReshadeShadersMagicbloomMagicbloom_blur_pass_5ShaderDef : public ShaderDef
{
public:
	ReshadeShadersMagicbloomMagicbloom_blur_pass_5ShaderDef() : ShaderDef{}
	{
		Name = "magicbloom_blur_pass_5";
		VertexByteCode = RetroArchReshadeShadersMagicbloomMagicbloom_blur_pass_5ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchReshadeShadersMagicbloomMagicbloom_blur_pass_5ShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchReshadeShadersMagicbloomMagicbloom_blur_pass_5ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchReshadeShadersMagicbloomMagicbloom_blur_pass_5ShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("ApplyBloom", -1, 60, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "          Apply Bloom"));
		Params.push_back(ShaderParam("fBloom_Intensity", -1, 52, 4, 0.000000f, 10.000000f, 1.000000f, 0.100000f, "          Bloom Intensity"));
		Params.push_back(ShaderParam("fBloom_Threshold", -1, 56, 4, 1.000000f, 10.000000f, 2.000000f, 0.100000f, "          Bloom Threshold"));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
