/*
ShaderGlass shader crt-shaders-cathode-retro\cathode-retro-decoder-svideo-to-rgb imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/23046258f7fd02242cc6dd4c08c997a8ddb84935/crt/shaders/cathode-retro/cathode-retro-decoder-svideo-to-rgb.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This signal takes an input S-Video signal and converts it into a set of YIQ color space values.
//
// This process is called NTSC color demodulation, which is a type of QAM demodulation.
//
// An NTSC signal (either composite or S-Video) is really just encoded YIQ data, where the Y value is encoded as luma
//  and IQ is encoded as a waveform in the chroma. Since this shader takes an effective S-Video signal as input, the Y
//  component is easy - it's just the luma channel of the input.
//
// Just like filtering the luma from the chroma (see the comment in CompositeToSVideo.hlsl), rather than doing any sort
//  of fancy filtering here, the absolute best results I've gotten were from a super-basic average (which very nicely
//  removes a very specific frequency and all integer multiples of it), which is also exactly what we need here.
//
// Additionally, if we want temporal artifact reduction, we're doing two of this calculation (we have a
//  (lumaA, chromaA, lumaB, chromaB) texture representing the same frame with two different color phases), and we use
//  the temporal artifact reduction value to blend between them, which reduces or eliminates alternating-phase-related
//  flickering that systems like the NES could generate.
//
// The output of this shader is a texture that contains the decoded Y, I, and Q channels in R, G, and B
//  (plus 1.0 in alpha).
// Perform a centered box filter - which means we might need to sample a half-texel off of either end of the filter, if
//  the filter width is even (and it probably is).
// Get the center sample (which we'll write out to the caller)
// Average starts with the center sample
// Excluding the center texel, iterate over every two samples to either side of the center sampling in the middle to
//  get a nice bilinear average of the two (getting two texel samples for free). Multiply by 2 so that we get 1.0 of
//  each of them.
// Now we either have no texels, a half texel, a full texel, or 1.5 texels remaining (or in other words, our
//  width-minus-center modulo 4 is one of 0 through 3.  If it's 0, we don't have to do anything, we've averaged all
//  of the texels.
// If it's 3, we have 1.5 texels left per end. Sample 1/3rd of the way into the inner-most texel (Because of how
//  lerp works, that means we get 2/3rd of the inner texel and 1/3rd of the outermost), then multiply the result by
//  1.5 to give us 1.0 of the innermost and 0.5 of the outermost texel (we want one half of the outer texel and
//  full weight of the inner one).
// If the remainder is either 1 or 2, we either have a half texel or a full texel remaining on either end. Sample
//  the center of that texel and then scale it down by 0.5 if we only need half of its weight.
// This is a 2- or 4-component texture that contains either a single luma, chroma sample pair or two luma, chroma pairs
//  of S-Video-like signal. It's 2 components if we have no temporal artifact reduction (we're not blending two
//  versions of the same frame), 4 if we do. This sampler should be set up for linear filtering and clamped addressing.
//DECLARE_TEXTURE2D(g_sourceTexture, g_sampler);
// This is a 2- or 4-component texture that contains the chroma portions of the signal modulated with the carrier
//  quadrature (basically, it's float4(chromaA * sin, chromaA * cos, chromaB * sin, chromaB * cos).
// This has been modulated in a separate pass for efficiency - otherwise we'd need to do a bunch of  sines and cosines
//  per pixel here.
//DECLARE_TEXTURE2D(g_modulatedChromaTexture, g_modulatedChromaSampler);
// How many samples (horizontal texels) there are per each color wave cycle.
// This is a value representing how saturated we want the output to be. 0 basically means we'll decode as a grayscale
//  image, 1 means fully saturated color (i.e. the intended input saturation), and you could even set values greater
//  than 1 to oversaturate.
// This corresponds to the saturation dial of a CRT TV.
// $NOTE: This value should be pre-scaled by the g_brightness value, so that if brightness is 0, saturation is always
//  0 - otherwise, you get weird output values where there should have been nothing visible but instead you get a
//  pure color instead.
// This is a value representing the brightness of the output. a value of 0 means we'll output pure black, and 1 means
//  "the intended brightness based on the input signal". Values above 1 will over-brighten the output.
//  This corresponds to the brightness dial of a CRT TV.
// This is the luma value of the input signal that represents black. For our synthetic signals it's typically 0.0,
//  but from a real NTSC signal this can be some other voltage level, since a voltage of 0 typically indicates a
//  horizontal or vertical blank instead. This is calculated from/generated with the composite or S-Video signal we
//  were given.
// This is the luma value of the input signal that represents brightest white.  For our synthetic signals it's
//  typically 1.0, but from a real NTSC signal (or if we've applied some signal artifacts like ghosting) it could be
//  some other value. This is calculated from/generated with the composite or S-Video signal we were given.
// A [0..1] value indicating how much we want to blend in an alternate version of the generated signal to adjust for
//  any artifacting between successive frames. 0 means we only have (or want to use) a single input luma/chroma pair.
//  A value > 0 means we are going to blend the results of two parallel-computed versions of our YIQ values, with a
//  value of 1.0 being a pure average of the two.
// The width of the input signal (including any side padding)
// The width of the output RGB image (should be the width of the input signal minus the side padding)
// Get the index of our x sample.
// This is the chroma decode process, it's a QAM demodulation.
//  You multiply the chroma signal by a reference waveform and its quadrature (Basically, sin and cos at a given
//  time) and then filter out the chroma frequency (here done by a box filter (an average)). What you're left with
//  are the approximate I and Q color space values for this part of the image.
// We're going to sample chroma at double our actual colorburst cycle to eliminate some deeply rough artifacting on
//  the edges. In this case we're going to average by DOUBLE the color burst cycle - doing just a single cycle ends
//  up with a LOT of edge artifacting on things, which are too strong. 2x is much softer but not so large that you
//  can really notice that it's adding a ton of extra blurring on the color channel (it needs to be an integer
//  multiple of our cycle sample count for the filtering to work).
// $TODO: This could actually be reduced to 1 when we're doing an decode of a signal that was not originally
//  composite, since there are no areas where luma changes will have crept into the color channel, which is typically
//  the artifacting we see.
// Adjust our components, first Y to account for the signal's black/white level (and user-chosen brightness), then IQ
//  for saturation (Which should also include the signal's brightness scale)
// we have 1 or 2 components of Y, and 2 or 4 of IQ. Blend them together based on our temporal aliasing reduction to
//  get our final decoded YIQ values.
// Do some gamma adjustments (values effectively based on eyeballing the results of NTSC signals from NES, SNES, and
//  Genesis consoles)
// Finally, run the YIQ values through the standard (SMPTE C) YIQ to RGB conversion matrix
//  (from https://en.wikipedia.org/wiki/YIQ)

*/

#pragma once

namespace RetroArchCrtShadersCathodeRetroCathodeRetroDecoderSvideoToRgbShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,98,121,
196,154,194,61,252,4,
201,138,51,20,103,122,
157,45,1,0,0,0,
176,11,0,0,5,0,
0,0,52,0,0,0,
76,9,0,0,152,9,
0,0,240,9,0,0,
20,11,0,0,82,68,
69,70,16,9,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
229,8,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,35,0,
0,0,120,0,0,0,
224,0,0,0,0,0,
0,0,0,0,0,0,
240,5,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,4,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,40,6,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,68,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,104,6,0,0,
80,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
168,6,0,0,84,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,189,6,
0,0,88,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,209,6,0,0,
92,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
227,6,0,0,96,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,251,6,
0,0,100,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,9,7,0,0,
104,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
27,7,0,0,108,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,44,7,
0,0,112,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,59,7,0,0,
116,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
76,7,0,0,120,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,94,7,
0,0,124,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,114,7,0,0,
128,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
136,7,0,0,132,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,148,7,
0,0,136,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,163,7,0,0,
140,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
181,7,0,0,144,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,202,7,
0,0,148,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,223,7,0,0,
152,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
250,7,0,0,156,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,14,8,
0,0,160,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,30,8,0,0,
164,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
49,8,0,0,168,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,68,8,
0,0,172,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,85,8,0,0,
176,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
104,8,0,0,180,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,122,8,
0,0,184,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,145,8,0,0,
188,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
163,8,0,0,192,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,181,8,
0,0,196,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,193,8,0,0,
200,0,0,0,4,0,
0,0,0,0,0,0,
132,6,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
205,8,0,0,204,0,
0,0,4,0,0,0,
0,0,0,0,132,6,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,217,8,
0,0,208,0,0,0,
4,0,0,0,0,0,
0,0,132,6,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
251,5,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
102,108,111,97,116,52,
0,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,60,6,
0,0,103,108,111,98,
97,108,95,99,98,95,
102,105,114,115,116,95,
115,116,97,114,116,0,
102,108,111,97,116,0,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,126,6,0,0,
103,108,111,98,97,108,
95,99,98,95,108,97,
115,116,95,115,116,97,
114,116,0,103,108,111,
98,97,108,95,99,98,
95,112,104,97,115,101,
95,105,110,99,0,103,
108,111,98,97,108,95,
99,98,95,115,97,109,
112,108,101,115,0,103,
108,111,98,97,108,95,
104,111,114,122,95,116,
114,97,99,107,95,115,
99,97,108,101,0,103,
108,111,98,97,108,95,
109,105,110,108,117,109,
0,103,108,111,98,97,
108,95,99,111,108,111,
114,112,111,119,101,114,
0,103,108,111,98,97,
108,95,99,111,109,112,
111,115,105,116,101,0,
103,108,111,98,97,108,
95,115,105,103,95,112,
97,100,0,103,108,111,
98,97,108,95,103,104,
111,115,116,95,118,105,
115,0,103,108,111,98,
97,108,95,103,104,111,
115,116,95,100,105,115,
116,0,103,108,111,98,
97,108,95,103,104,111,
115,116,95,115,112,114,
101,97,100,0,103,108,
111,98,97,108,95,110,
111,105,115,101,95,115,
116,114,101,110,103,116,
104,0,103,108,111,98,
97,108,95,116,105,110,
116,0,103,108,111,98,
97,108,95,99,97,116,
95,115,97,116,0,103,
108,111,98,97,108,95,
99,97,116,95,98,114,
105,103,104,116,0,103,
108,111,98,97,108,95,
99,97,116,95,119,104,
105,116,101,95,108,118,
108,0,103,108,111,98,
97,108,95,99,97,116,
95,98,108,97,99,107,
95,108,118,108,0,103,
108,111,98,97,108,95,
116,101,109,112,95,97,
114,116,105,102,97,99,
116,95,98,108,101,110,
100,0,103,108,111,98,
97,108,95,98,108,117,
114,83,116,114,101,110,
103,116,104,0,103,108,
111,98,97,108,95,115,
116,101,112,83,105,122,
101,0,103,108,111,98,
97,108,95,112,101,114,
115,105,115,116,101,110,
99,101,0,103,108,111,
98,97,108,95,115,99,
97,110,95,105,110,116,
101,110,115,0,103,108,
111,98,97,108,95,100,
105,102,102,117,115,105,
111,110,0,103,108,111,
98,97,108,95,109,97,
115,107,95,105,110,116,
101,110,115,0,103,108,
111,98,97,108,95,109,
97,115,107,95,100,101,
112,116,104,0,103,108,
111,98,97,108,95,99,
97,116,95,109,97,115,
107,95,112,105,99,107,
101,114,0,103,108,111,
98,97,108,95,109,97,
115,107,95,115,99,97,
108,101,0,103,108,111,
98,97,108,95,97,110,
105,109,95,110,111,105,
115,101,0,103,108,111,
98,97,108,95,100,105,
118,48,0,103,108,111,
98,97,108,95,100,105,
118,49,0,103,108,111,
98,97,108,95,100,105,
118,50,0,103,108,111,
98,97,108,95,100,105,
118,51,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,171,171,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,28,1,
0,0,80,0,1,0,
71,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
56,0,0,10,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,2,64,0,0,
71,3,128,63,71,3,
128,63,0,0,0,0,
0,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
6,0,0,0,1,0,
0,0,0,0,0,0,
4,0,0,0,5,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,138,87,
204,109,36,219,17,161,
79,137,103,160,95,240,
53,152,1,0,0,0,
248,22,0,0,5,0,
0,0,52,0,0,0,
152,12,0,0,204,12,
0,0,0,13,0,0,
92,22,0,0,82,68,
69,70,92,12,0,0,
2,0,0,0,100,1,
0,0,6,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
51,12,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
252,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,17,1,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,51,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
2,0,0,0,1,0,
0,0,13,0,0,0,
63,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,3,0,0,0,
1,0,0,0,13,0,
0,0,88,1,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,92,1,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,73,81,95,115,101,
112,97,114,97,116,101,
95,115,97,109,112,108,
101,114,0,95,103,95,
109,111,100,117,108,97,
116,101,100,67,104,114,
111,109,97,84,101,120,
116,117,114,101,95,115,
97,109,112,108,101,114,
0,73,81,95,115,101,
112,97,114,97,116,101,
0,103,95,109,111,100,
117,108,97,116,101,100,
67,104,114,111,109,97,
84,101,120,116,117,114,
101,0,85,66,79,0,
80,117,115,104,0,171,
171,171,88,1,0,0,
35,0,0,0,148,1,
0,0,224,0,0,0,
0,0,0,0,0,0,
0,0,92,1,0,0,
9,0,0,0,4,10,
0,0,96,0,0,0,
0,0,0,0,0,0,
0,0,12,7,0,0,
0,0,0,0,64,0,
0,0,0,0,0,0,
32,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
68,7,0,0,64,0,
0,0,16,0,0,0,
0,0,0,0,96,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,132,7,
0,0,80,0,0,0,
4,0,0,0,0,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,196,7,0,0,
84,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
217,7,0,0,88,0,
0,0,4,0,0,0,
0,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,237,7,
0,0,92,0,0,0,
4,0,0,0,2,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,255,7,0,0,
96,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
23,8,0,0,100,0,
0,0,4,0,0,0,
0,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,37,8,
0,0,104,0,0,0,
4,0,0,0,0,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,55,8,0,0,
108,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
72,8,0,0,112,0,
0,0,4,0,0,0,
2,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,87,8,
0,0,116,0,0,0,
4,0,0,0,0,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,104,8,0,0,
120,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
122,8,0,0,124,0,
0,0,4,0,0,0,
0,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,142,8,
0,0,128,0,0,0,
4,0,0,0,0,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,164,8,0,0,
132,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
176,8,0,0,136,0,
0,0,4,0,0,0,
2,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,191,8,
0,0,140,0,0,0,
4,0,0,0,2,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,209,8,0,0,
144,0,0,0,4,0,
0,0,2,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
230,8,0,0,148,0,
0,0,4,0,0,0,
2,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,251,8,
0,0,152,0,0,0,
4,0,0,0,2,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,22,9,0,0,
156,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
42,9,0,0,160,0,
0,0,4,0,0,0,
0,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,58,9,
0,0,164,0,0,0,
4,0,0,0,0,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,77,9,0,0,
168,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
96,9,0,0,172,0,
0,0,4,0,0,0,
0,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,113,9,
0,0,176,0,0,0,
4,0,0,0,0,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,132,9,0,0,
180,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
150,9,0,0,184,0,
0,0,4,0,0,0,
0,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,173,9,
0,0,188,0,0,0,
4,0,0,0,0,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,191,9,0,0,
192,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
209,9,0,0,196,0,
0,0,4,0,0,0,
0,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,221,9,
0,0,200,0,0,0,
4,0,0,0,0,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,233,9,0,0,
204,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
245,9,0,0,208,0,
0,0,4,0,0,0,
0,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,23,7,0,0,
103,108,111,98,97,108,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,102,108,111,97,
116,52,0,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
88,7,0,0,103,108,
111,98,97,108,95,99,
98,95,102,105,114,115,
116,95,115,116,97,114,
116,0,102,108,111,97,
116,0,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,154,7,
0,0,103,108,111,98,
97,108,95,99,98,95,
108,97,115,116,95,115,
116,97,114,116,0,103,
108,111,98,97,108,95,
99,98,95,112,104,97,
115,101,95,105,110,99,
0,103,108,111,98,97,
108,95,99,98,95,115,
97,109,112,108,101,115,
0,103,108,111,98,97,
108,95,104,111,114,122,
95,116,114,97,99,107,
95,115,99,97,108,101,
0,103,108,111,98,97,
108,95,109,105,110,108,
117,109,0,103,108,111,
98,97,108,95,99,111,
108,111,114,112,111,119,
101,114,0,103,108,111,
98,97,108,95,99,111,
109,112,111,115,105,116,
101,0,103,108,111,98,
97,108,95,115,105,103,
95,112,97,100,0,103,
108,111,98,97,108,95,
103,104,111,115,116,95,
118,105,115,0,103,108,
111,98,97,108,95,103,
104,111,115,116,95,100,
105,115,116,0,103,108,
111,98,97,108,95,103,
104,111,115,116,95,115,
112,114,101,97,100,0,
103,108,111,98,97,108,
95,110,111,105,115,101,
95,115,116,114,101,110,
103,116,104,0,103,108,
111,98,97,108,95,116,
105,110,116,0,103,108,
111,98,97,108,95,99,
97,116,95,115,97,116,
0,103,108,111,98,97,
108,95,99,97,116,95,
98,114,105,103,104,116,
0,103,108,111,98,97,
108,95,99,97,116,95,
119,104,105,116,101,95,
108,118,108,0,103,108,
111,98,97,108,95,99,
97,116,95,98,108,97,
99,107,95,108,118,108,
0,103,108,111,98,97,
108,95,116,101,109,112,
95,97,114,116,105,102,
97,99,116,95,98,108,
101,110,100,0,103,108,
111,98,97,108,95,98,
108,117,114,83,116,114,
101,110,103,116,104,0,
103,108,111,98,97,108,
95,115,116,101,112,83,
105,122,101,0,103,108,
111,98,97,108,95,112,
101,114,115,105,115,116,
101,110,99,101,0,103,
108,111,98,97,108,95,
115,99,97,110,95,105,
110,116,101,110,115,0,
103,108,111,98,97,108,
95,100,105,102,102,117,
115,105,111,110,0,103,
108,111,98,97,108,95,
109,97,115,107,95,105,
110,116,101,110,115,0,
103,108,111,98,97,108,
95,109,97,115,107,95,
100,101,112,116,104,0,
103,108,111,98,97,108,
95,99,97,116,95,109,
97,115,107,95,112,105,
99,107,101,114,0,103,
108,111,98,97,108,95,
109,97,115,107,95,115,
99,97,108,101,0,103,
108,111,98,97,108,95,
97,110,105,109,95,110,
111,105,115,101,0,103,
108,111,98,97,108,95,
100,105,118,48,0,103,
108,111,98,97,108,95,
100,105,118,49,0,103,
108,111,98,97,108,95,
100,105,118,50,0,103,
108,111,98,97,108,95,
100,105,118,51,0,171,
171,171,108,11,0,0,
0,0,0,0,16,0,
0,0,2,0,0,0,
96,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
126,11,0,0,16,0,
0,0,16,0,0,0,
0,0,0,0,96,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,146,11,
0,0,32,0,0,0,
16,0,0,0,2,0,
0,0,96,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,164,11,0,0,
48,0,0,0,4,0,
0,0,0,0,0,0,
188,11,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
224,11,0,0,64,0,
0,0,16,0,0,0,
0,0,0,0,96,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,249,11,
0,0,80,0,0,0,
4,0,0,0,0,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,6,12,0,0,
84,0,0,0,4,0,
0,0,0,0,0,0,
160,7,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
19,12,0,0,88,0,
0,0,4,0,0,0,
0,0,0,0,160,7,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,33,12,
0,0,92,0,0,0,
4,0,0,0,0,0,
0,0,160,7,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,112,97,114,97,
109,115,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,112,97,
114,97,109,115,95,79,
117,116,112,117,116,83,
105,122,101,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
182,11,0,0,112,97,
114,97,109,115,95,70,
105,110,97,108,86,105,
101,119,112,111,114,116,
83,105,122,101,0,112,
97,114,97,109,115,95,
119,97,114,112,88,0,
112,97,114,97,109,115,
95,119,97,114,112,89,
0,112,97,114,97,109,
115,95,99,111,114,110,
101,114,0,112,97,114,
97,109,115,95,110,111,
105,115,101,95,115,101,
101,100,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,84,9,0,0,
80,0,0,0,85,2,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
10,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,3,0,
0,0,90,0,0,3,
0,96,16,0,2,0,
0,0,90,0,0,3,
0,96,16,0,3,0,
0,0,88,24,0,4,
0,112,16,0,2,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,3,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,8,0,0,0,
28,0,0,6,18,0,
16,0,0,0,0,0,
58,128,32,0,0,0,
0,0,5,0,0,0,
54,32,0,6,34,0,
16,0,0,0,0,0,
58,128,32,0,0,0,
0,0,8,0,0,0,
56,0,0,8,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,42,128,32,0,
0,0,0,0,8,0,
0,0,28,0,0,6,
66,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,0,0,
0,0,28,0,0,6,
130,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,2,0,
0,0,28,0,0,6,
18,0,16,0,1,0,
0,0,10,128,32,0,
0,0,0,0,7,0,
0,0,30,0,0,8,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,10,0,
16,128,65,0,0,0,
1,0,0,0,0,0,
0,7,18,0,16,0,
1,0,0,0,10,16,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,191,86,0,0,5,
194,0,16,0,0,0,
0,0,166,14,16,0,
0,0,0,0,56,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
10,0,16,0,1,0,
0,0,14,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
0,0,0,7,18,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,54,0,
0,5,34,0,16,0,
1,0,0,0,26,16,
16,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
194,0,16,0,1,0,
0,0,70,0,16,0,
1,0,0,0,214,120,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,14,0,0,10,
66,0,16,0,0,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,128,63,
0,0,128,63,42,0,
16,0,0,0,0,0,
41,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
1,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,2,0,0,0,
70,0,16,0,1,0,
0,0,70,126,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
30,0,0,7,130,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
255,255,255,255,85,0,
0,7,18,0,16,0,
3,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,1,0,
0,0,54,0,0,5,
34,0,16,0,4,0,
0,0,1,64,0,0,
0,0,0,0,54,0,
0,5,242,0,16,0,
5,0,0,0,70,14,
16,0,2,0,0,0,
54,0,0,5,34,0,
16,0,3,0,0,0,
1,64,0,0,2,0,
0,0,48,0,0,1,
80,0,0,7,66,0,
16,0,3,0,0,0,
26,0,16,0,3,0,
0,0,10,0,16,0,
3,0,0,0,3,0,
4,3,42,0,16,0,
3,0,0,0,86,0,
0,5,66,0,16,0,
3,0,0,0,26,0,
16,0,3,0,0,0,
0,0,0,7,66,0,
16,0,3,0,0,0,
42,0,16,0,3,0,
0,0,1,64,0,0,
0,0,0,191,56,0,
0,7,18,0,16,0,
4,0,0,0,42,0,
16,0,0,0,0,0,
42,0,16,0,3,0,
0,0,0,0,0,7,
194,0,16,0,3,0,
0,0,6,4,16,0,
1,0,0,0,6,4,
16,0,4,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,6,0,
0,0,230,10,16,0,
3,0,0,0,70,126,
16,0,3,0,0,0,
0,96,16,0,3,0,
0,0,50,0,0,12,
242,0,16,0,6,0,
0,0,70,14,16,0,
6,0,0,0,2,64,
0,0,0,0,0,64,
0,0,0,64,0,0,
0,64,0,0,0,64,
70,14,16,0,5,0,
0,0,0,0,0,8,
194,0,16,0,3,0,
0,0,6,4,16,0,
1,0,0,0,6,4,
16,128,65,0,0,0,
4,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,7,0,0,0,
230,10,16,0,3,0,
0,0,70,126,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
50,0,0,12,242,0,
16,0,5,0,0,0,
70,14,16,0,7,0,
0,0,2,64,0,0,
0,0,0,64,0,0,
0,64,0,0,0,64,
0,0,0,64,70,14,
16,0,6,0,0,0,
30,0,0,7,34,0,
16,0,3,0,0,0,
26,0,16,0,3,0,
0,0,1,64,0,0,
2,0,0,0,22,0,
0,1,1,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,3,0,0,0,
32,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
3,0,0,0,31,0,
4,3,58,0,16,0,
0,0,0,0,86,0,
0,5,130,0,16,0,
0,0,0,0,10,0,
16,0,3,0,0,0,
0,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
171,170,170,62,56,0,
0,7,18,0,16,0,
2,0,0,0,42,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,54,0,0,5,
34,0,16,0,2,0,
0,0,1,64,0,0,
0,0,0,0,0,0,
0,7,194,0,16,0,
0,0,0,0,6,4,
16,0,1,0,0,0,
6,4,16,0,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
3,0,0,0,230,10,
16,0,0,0,0,0,
70,126,16,0,3,0,
0,0,0,96,16,0,
3,0,0,0,50,0,
0,12,242,0,16,0,
3,0,0,0,70,14,
16,0,3,0,0,0,
2,64,0,0,0,0,
192,63,0,0,192,63,
0,0,192,63,0,0,
192,63,70,14,16,0,
5,0,0,0,0,0,
0,8,194,0,16,0,
0,0,0,0,6,4,
16,0,1,0,0,0,
6,4,16,128,65,0,
0,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,2,0,
0,0,230,10,16,0,
0,0,0,0,70,126,
16,0,3,0,0,0,
0,96,16,0,3,0,
0,0,50,0,0,12,
242,0,16,0,5,0,
0,0,70,14,16,0,
2,0,0,0,2,64,
0,0,0,0,192,63,
0,0,192,63,0,0,
192,63,0,0,192,63,
70,14,16,0,3,0,
0,0,21,0,0,1,
86,0,0,5,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,14,0,0,7,
242,0,16,0,2,0,
0,0,70,14,16,0,
5,0,0,0,6,0,
16,0,0,0,0,0,
0,0,0,9,82,0,
16,0,0,0,0,0,
166,11,16,0,1,0,
0,0,86,133,32,128,
65,0,0,0,0,0,
0,0,9,0,0,0,
0,0,0,10,130,0,
16,0,0,0,0,0,
26,128,32,128,65,0,
0,0,0,0,0,0,
9,0,0,0,10,128,
32,0,0,0,0,0,
9,0,0,0,14,0,
0,7,82,0,16,0,
0,0,0,0,6,2,
16,0,0,0,0,0,
246,15,16,0,0,0,
0,0,56,0,0,8,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,58,128,
32,0,0,0,0,0,
8,0,0,0,56,0,
0,7,50,0,16,0,
1,0,0,0,86,5,
16,0,0,0,0,0,
70,0,16,0,2,0,
0,0,56,0,0,8,
130,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,42,128,
32,0,0,0,0,0,
9,0,0,0,50,0,
0,11,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
58,128,32,0,0,0,
0,0,8,0,0,0,
10,0,16,128,65,0,
0,0,0,0,0,0,
50,32,0,9,18,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
50,0,0,10,98,0,
16,0,0,0,0,0,
166,11,16,0,2,0,
0,0,86,5,16,0,
0,0,0,0,6,1,
16,128,65,0,0,0,
1,0,0,0,50,0,
0,9,98,0,16,0,
0,0,0,0,246,15,
16,0,0,0,0,0,
86,6,16,0,0,0,
0,0,6,1,16,0,
1,0,0,0,47,0,
0,5,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
47,186,104,63,25,0,
0,5,18,0,16,0,
1,0,0,0,10,0,
16,0,0,0,0,0,
15,0,0,7,18,0,
16,0,0,0,0,0,
150,5,16,0,0,0,
0,0,150,5,16,0,
0,0,0,0,75,0,
0,5,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
51,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,47,0,
0,5,130,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
47,186,104,63,25,0,
0,5,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
52,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
172,197,39,55,14,0,
0,7,18,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,56,0,0,7,
98,0,16,0,1,0,
0,0,6,0,16,0,
0,0,0,0,86,6,
16,0,0,0,0,0,
16,0,0,10,18,32,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,2,64,0,0,
0,0,128,63,220,102,
114,63,110,161,31,63,
0,0,0,0,16,0,
0,10,34,32,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,63,3,177,140,190,
165,188,34,191,0,0,
0,0,16,0,0,10,
66,32,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,2,64,
0,0,0,0,128,63,
205,228,141,191,170,192,
218,63,0,0,0,0,
54,0,0,5,130,32,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,62,0,0,1,
83,84,65,84,148,0,
0,0,79,0,0,0,
8,0,0,0,0,0,
0,0,2,0,0,0,
44,0,0,0,5,0,
0,0,3,0,0,0,
1,0,0,0,2,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,6,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
7,0,0,0,0,0,
0,0,8,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};

}

namespace RetroArch
{
class CrtShadersCathodeRetroCathodeRetroDecoderSvideoToRgbShaderDef : public ShaderDef
{
public:
	CrtShadersCathodeRetroCathodeRetroDecoderSvideoToRgbShaderDef() : ShaderDef{}
	{
		Name = "cathode-retro-decoder-svideo-to-rgb";
		VertexByteCode = RetroArchCrtShadersCathodeRetroCathodeRetroDecoderSvideoToRgbShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCathodeRetroCathodeRetroDecoderSvideoToRgbShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersCathodeRetroCathodeRetroDecoderSvideoToRgbShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCathodeRetroCathodeRetroDecoderSvideoToRgbShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("div0", 0, 196, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "--------Screen Settings--------"));
		Params.push_back(ShaderParam("scan_intens", 0, 168, 4, 0.000000f, 1.000000f, 0.400000f, 0.010000f, "Scanline Intensity"));
		Params.push_back(ShaderParam("cat_mask_picker", 0, 184, 4, 0.000000f, 3.000000f, 1.000000f, 1.000000f, "Mask (0=none, 1=aperture, 2=slot, 3=shadow)"));
		Params.push_back(ShaderParam("mask_intens", 0, 176, 4, 0.000000f, 1.000000f, 0.400000f, 0.010000f, "Mask Strength"));
		Params.push_back(ShaderParam("mask_scale", 0, 188, 4, 1.000000f, 200.000000f, 1.000000f, 1.000000f, "Mask Scale (2 or 3 for 4K)"));
		Params.push_back(ShaderParam("mask_depth", 0, 180, 4, 0.000000f, 1.000000f, 0.300000f, 0.010000f, "Mask Background Darkness"));
		Params.push_back(ShaderParam("warpX", -1, 80, 4, 0.000000f, 1.000000f, 0.200000f, 0.010000f, "Barrel Distortion X"));
		Params.push_back(ShaderParam("warpY", -1, 84, 4, 0.000000f, 1.000000f, 0.100000f, 0.010000f, "Barrel Distortion Y"));
		Params.push_back(ShaderParam("anim_noise", 0, 192, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Animate Anti-Moire Noise"));
		Params.push_back(ShaderParam("corner", -1, 88, 4, 0.000000f, 1.000000f, 0.030000f, 0.010000f, "Rounded Corner Size"));
		Params.push_back(ShaderParam("persistence", 0, 164, 4, 0.000000f, 1.000000f, 0.250000f, 0.010000f, "Phosphor Persistence"));
		Params.push_back(ShaderParam("diffusion", 0, 172, 4, 0.000000f, 1.000000f, 0.500000f, 0.010000f, "Diffusion Strength"));
		Params.push_back(ShaderParam("div1", 0, 200, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "---------TV Knob Settings---------"));
		Params.push_back(ShaderParam("cat_sat", 0, 136, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Saturation"));
		Params.push_back(ShaderParam("cat_bright", 0, 140, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Brightness"));
		Params.push_back(ShaderParam("cat_white_lvl", 0, 144, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "White Level"));
		Params.push_back(ShaderParam("cat_black_lvl", 0, 148, 4, 0.000000f, 2.000000f, 0.000000f, 0.010000f, "Black Level"));
		Params.push_back(ShaderParam("tint", 0, 132, 4, -1.000000f, 1.000000f, 0.000000f, 0.010000f, "Tint Knob Adjustment"));
		Params.push_back(ShaderParam("blurStrength", 0, 156, 4, -1.000000f, 1.000000f, -0.150000f, 0.010000f, "Sharpness"));
		Params.push_back(ShaderParam("div2", 0, 204, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "---------Signal Parameters---------"));
		Params.push_back(ShaderParam("composite", 0, 108, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "Blend Chrome/Luma (aka Composite)"));
		Params.push_back(ShaderParam("sig_pad", 0, 112, 4, 0.000000f, 10.000000f, 0.000000f, 1.000000f, "Signal Padding at Edges"));
		Params.push_back(ShaderParam("minlum", 0, 100, 4, 0.000000f, 1.000000f, 1.000000f, 0.010000f, "Minimum Luminance"));
		Params.push_back(ShaderParam("colorpower", 0, 104, 4, 0.000000f, 2.000000f, 1.000000f, 0.010000f, "Color Power"));
		Params.push_back(ShaderParam("noise_seed", -1, 92, 4, 179.000000f, 313.000000f, 247.000000f, 1.000000f, "Noise Seed"));
		Params.push_back(ShaderParam("cb_samples", 0, 92, 4, 1.000000f, 100.000000f, 2.000000f, 1.000000f, "Samples Per Color Burst Cyle"));
		Params.push_back(ShaderParam("cb_first_start", 0, 80, 4, 0.000000f, 100.000000f, 0.000000f, 1.000000f, "Color Burst Phase First Scanline"));
		Params.push_back(ShaderParam("cb_last_start", 0, 84, 4, 0.000000f, 100.000000f, 1.000000f, 1.000000f, "CB Phase Prev Frame First Scanline"));
		Params.push_back(ShaderParam("cb_phase_inc", 0, 88, 4, 0.000000f, 3.000000f, 1.666660f, 0.010000f, "Color Burst Phase Increment"));
		Params.push_back(ShaderParam("stepSize", 0, 160, 4, 1.000000f, 100.000000f, 1.000000f, 1.000000f, "Texels Between Each Sample"));
		Params.push_back(ShaderParam("div3", 0, 208, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, "-------Artifact Settings-------"));
		Params.push_back(ShaderParam("horz_track_scale", 0, 96, 4, 0.000000f, 3.000000f, 1.000000f, 0.050000f, "Horizontal Tracking Instability Scale"));
		Params.push_back(ShaderParam("ghost_vis", 0, 116, 4, 0.000000f, 1.000000f, 0.150000f, 0.010000f, "Ghost Visibility"));
		Params.push_back(ShaderParam("ghost_dist", 0, 120, 4, 0.000000f, 100.000000f, 1.000000f, 1.000000f, "Ghost Delay Cycles"));
		Params.push_back(ShaderParam("ghost_spread", 0, 124, 4, 0.000000f, 100.000000f, 1.000000f, 1.000000f, "Ghost Spread Cycles"));
		Params.push_back(ShaderParam("noise_strength", 0, 128, 4, 0.000000f, 1.000000f, 0.150000f, 0.010000f, "Artifact Noise Strength"));
		Params.push_back(ShaderParam("temp_artifact_blend", 0, 152, 4, 0.000000f, 1.000000f, 0.000000f, 1.000000f, "Temporal Artifact Blending (Toggle)"));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FinalViewportSize", -1, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("IQ_separate", 2));
		Samplers.push_back(ShaderSampler("g_modulatedChromaTexture", 3));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
