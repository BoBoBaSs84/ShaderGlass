/*
ShaderGlass shader ntsc-shaders-patchy-ntsc-afterglow0-update\afterglow0-update-pass3 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/23046258f7fd02242cc6dd4c08c997a8ddb84935/ntsc/shaders/patchy-ntsc/afterglow0-update/afterglow0-update-pass3.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

//#pragma parameter bogus_color "[ COLOR TWEAKS ]:" 0.0 0.0 1.0 1.0
//
//#pragma parameter CS "          Display Gamut: sRGB, Modern, DCI, Adobe, Rec.2020" 0.0 0.0 4.0 1.0
//
//#pragma parameter CP "          CRT Profile: EBU | P22 | SMPTE-C | Philips | Trin." 0.0 -1.0 5.0 1.0
//
//#define CP params.CP
//#define CS params.CS
//
//#pragma parameter TNTC "          LUT Colors: Trin.1 | Trin.2 | Nec Mult. | NTSC" 0.0 0.0 4.0 1.0
//#define TNTC params.TNTC
//
//#pragma parameter LS "          LUT Size" 32.0 16.0 64.0 16.0
//#define LS params.LS
//
//#define LUTLOW 5.0  // "Fix LUT Dark - Range" from 0.0 to 50.0 - RGB singletons
//
//#define LUTBR 1.0   // "Fix LUT Brightness" from 0.0 to 1.0
//
//#pragma parameter WP "          Color Temperature %" 0.0 -100.0 100.0 5.0
//
//#pragma parameter wp_saturation "          Saturation Adjustment" 1.0 0.0 2.0 0.05
//
//#pragma parameter pre_bb "          Brightness Adjustment" 1.0 0.0 2.0 0.01
//
//#pragma parameter contr "          Contrast Adjustment" 0.0 -2.0 2.0 0.05
//
//#pragma parameter sega_fix "          Sega Brightness Fix" 0.0 0.0 1.0 1.0
//
//#pragma parameter BP "          Raise Black Level" 0.0 -100.0 25.0 1.0
//
//#pragma parameter vigstr "          Vignette Strength" 0.0 0.0 2.0 0.05
//
//#pragma parameter vigdef "          Vignette Size" 1.0 0.5 3.0 0.10
//
//#define WP params.WP
//#define wp_saturation params.wp_saturation
//#define BP params.BP
//layout(set = 0, binding = 4) uniform sampler2D SamplerLUT1;
//layout(set = 0, binding = 5) uniform sampler2D SamplerLUT2;
//layout(set = 0, binding = 6) uniform sampler2D SamplerLUT3;
//layout(set = 0, binding = 7) uniform sampler2D SamplerLUT4;
// Color profile matrices
//const mat3 Profile0 =
//mat3(
// 0.412391,  0.212639,  0.019331,
// 0.357584,  0.715169,  0.119195,
// 0.180481,  0.072192,  0.950532
//);
//
//const mat3 Profile1 =
//mat3(
// 0.430554,  0.222004,  0.020182,
// 0.341550,  0.706655,  0.129553,
// 0.178352,  0.071341,  0.939322
//);
//
//const mat3 Profile2 =
//mat3(
// 0.396686,  0.210299,  0.006131,
// 0.372504,  0.713766,  0.115356,
// 0.181266,  0.075936,  0.967571
//);
//
//const mat3 Profile3 =
//mat3(
// 0.393521,  0.212376,  0.018739,
// 0.365258,  0.701060,  0.111934,
// 0.191677,  0.086564,  0.958385
//);
//
//const mat3 Profile4 =
//mat3(
// 0.392258,  0.209410,  0.016061,
// 0.351135,  0.725680,  0.093636,
// 0.166603,  0.064910,  0.850324
//);
//
//const mat3 Profile5 =
//mat3(
// 0.377923,  0.195679,  0.010514,
// 0.317366,  0.722319,  0.097826,
// 0.207738,  0.082002,  1.076960
//);
//
//const mat3 ToSRGB =
//mat3(
// 3.240970, -0.969244,  0.055630,
//-1.537383,  1.875968, -0.203977,
//-0.498611,  0.041555,  1.056972
//);
//
//const mat3 ToModern =
//mat3(
// 2.791723,	-0.894766,	0.041678,
//-1.173165,	 1.815586, -0.130886,
//-0.440973,	 0.032000,	1.002034
//);
//
//const mat3 ToDCI =
//mat3(
// 2.493497,	-0.829489,	0.035846,
//-0.931384,	 1.762664, -0.076172,
//-0.402711,	 0.023625,	0.956885
//);
//
//const mat3 ToAdobe =
//mat3(
// 2.041588, -0.969244,  0.013444,
//-0.565007,  1.875968, -0.11836,
//-0.344731,  0.041555,  1.015175
//);
//
//const mat3 ToREC =
//mat3(
// 1.716651, -0.666684,  0.017640,
//-0.355671,  1.616481, -0.042771,
//-0.253366,  0.015769,  0.942103
//);
// Color temperature matrices
//const mat3 D65_to_D55 = mat3 (
//           0.4850339153,  0.2500956126,  0.0227359648,
//           0.3488957224,  0.6977914447,  0.1162985741,
//           0.1302823568,  0.0521129427,  0.6861537456);
//
//
//const mat3 D65_to_D93 = mat3 (
//           0.3412754080,  0.1759701322,  0.0159972847,
//           0.3646170520,  0.7292341040,  0.1215390173,
//           0.2369894093,  0.0947957637,  1.2481442225);
//
//
//vec3 fix_lut(vec3 lutcolor, vec3 ref)
//{
//	float r = length(ref);
//	float l = length(lutcolor);
//	float m = max(max(ref.r,ref.g),ref.b);
//	ref = normalize(lutcolor + 0.0000001) * mix(r, l, pow(m,1.25));
//	return mix(lutcolor, ref, LUTBR);
//}
//
//
//float vignette(vec2 pos) {
//	vec2 b = vec2(params.vigdef, params.vigdef) *  vec2(1.0, params.OriginalSize.x/params.OriginalSize.y) * 0.125;
//	pos = clamp(pos, 0.0, 1.0);
//	pos = abs(2.0*(pos - 0.5));
//	vec2 res = mix(0.0.xx, 1.0.xx, smoothstep(1.0.xx, 1.0.xx-b, sqrt(pos)));
//	res = pow(res, 0.70.xx);
//	return max(mix(1.0, sqrt(res.x*res.y), params.vigstr), 0.0);
//}
//
//
//vec3 plant (vec3 tar, float r)
//{
//	float t = max(max(tar.r,tar.g),tar.b) + 0.00001;
//	return tar * r / t;
//}
//
//float contrast(float x)
//{
//	return max(mix(x, smoothstep(0.0, 1.0, x), params.contr),0.0);
//}
//   float bp = w * BP/255.0;
//
//   if (params.sega_fix > 0.5) imgColor.rgb = imgColor.rgb * (255.0 / 239.0);
//
//   imgColor.rgb = min(imgColor.rgb, 1.0);
//
//   vec3 color = imgColor.rgb;
//
//   if (int(TNTC) == 0)
//   {
//      color.rgb = imgColor.rgb;
//   }
//   else
//   {
//	  float lutlow = LUTLOW/255.0; float invLS = 1.0/LS;
//	  vec3 lut_ref = imgColor.rgb + lutlow*(1.0 - pow(imgColor.rgb, 0.333.xxx));
//	  float lutb = lut_ref.b * (1.0-0.5*invLS);
//	  lut_ref.rg    = lut_ref.rg * (1.0-invLS) + 0.5*invLS;
//	  float tile1 = ceil (lutb * (LS-1.0));
//	  float tile0 = max(tile1 - 1.0, 0.0);
//	  float f = fract(lutb * (LS-1.0)); if (f == 0.0) f = 1.0;
//	  vec2 coord0 = vec2(tile0 + lut_ref.r, lut_ref.g)*vec2(invLS, 1.0);
//	  vec2 coord1 = vec2(tile1 + lut_ref.r, lut_ref.g)*vec2(invLS, 1.0);
//	  vec4 color1, color2, res;
//
//      if (int(TNTC) == 1)
//      {
//         color1 = COMPAT_TEXTURE(SamplerLUT1, coord0);
//         color2 = COMPAT_TEXTURE(SamplerLUT1, coord1);
//         res = mix(color1, color2, f);
//      }
//      else if (int(TNTC) == 2)
//      {
//         color1 = COMPAT_TEXTURE(SamplerLUT2, coord0);
//         color2 = COMPAT_TEXTURE(SamplerLUT2, coord1);
//         res = mix(color1, color2, f);
//      }
//      else if (int(TNTC) == 3)
//      {
//         color1 = COMPAT_TEXTURE(SamplerLUT3, coord0);
//         color2 = COMPAT_TEXTURE(SamplerLUT3, coord1);
//         res = mix(color1, color2, f);
//      }
//      else if (int(TNTC) == 4)
//      {
//         color1 = COMPAT_TEXTURE(SamplerLUT4, coord0);
//         color2 = COMPAT_TEXTURE(SamplerLUT4, coord1);
//         res = mix(color1, color2, f);
//      }
//
//      res.rgb = fix_lut (res.rgb, imgColor.rgb);
//
//      color = mix(imgColor.rgb, res.rgb, min(TNTC,1.0));
//   }
//
//	vec3 c = clamp(color, 0.0, 1.0);
//
//	float p;
//	mat3 m_out;
//
//	if (CS == 0.0) { p = 2.2; m_out =  ToSRGB;   } else
//	if (CS == 1.0) { p = 2.2; m_out =  ToModern; } else
//	if (CS == 2.0) { p = 2.6; m_out =  ToDCI;    } else
//	if (CS == 3.0) { p = 2.2; m_out =  ToAdobe;  } else
//	if (CS == 4.0) { p = 2.4; m_out =  ToREC;    }
//
//	color = pow(c, vec3(p));
//
//	mat3 m_in = Profile0;
//
//	if (CP == 0.0) { m_in = Profile0; } else
//	if (CP == 1.0) { m_in = Profile1; } else
//	if (CP == 2.0) { m_in = Profile2; } else
//	if (CP == 3.0) { m_in = Profile3; } else
//	if (CP == 4.0) { m_in = Profile4; } else
//	if (CP == 5.0) { m_in = Profile5; }
//
//	color = m_in*color;
//	color = m_out*color;
//
//	color = clamp(color, 0.0, 1.0);
//
//	color = pow(color, vec3(1.0/p));
//
//	if (CP == -1.0) color = c;
//
//	vec3 scolor1 = plant(pow(color, vec3(wp_saturation)), max(max(color.r,color.g),color.b));
//	float luma = dot(color, vec3(0.299, 0.587, 0.114));
//	vec3 scolor2 = mix(vec3(luma), color, wp_saturation);
//	color = (wp_saturation > 1.0) ? scolor1 : scolor2;
//
//	color = plant(color, contrast(max(max(color.r,color.g),color.b)));
//
//	p = 2.2;
//	color = clamp(color, 0.0, 1.0);
//	color = pow(color, vec3(p));
//
//	vec3 warmer = D65_to_D55*color;
//	warmer = ToSRGB*warmer;
//
//	vec3 cooler = D65_to_D93*color;
//	cooler = ToSRGB*cooler;
//
//	float m = abs(WP)/100.0;
//
//	vec3 comp = (WP < 0.0) ? cooler : warmer;
//
//	color = mix(color, comp, m);
//	color = pow(max(color, 0.0), vec3(1.0/p));
//
//	if (BP > -0.5) color = color + aftglow.rgb + bp; else
//	{
//		color = max(color + BP/255.0, 0.0) / (1.0 + BP/255.0*step(- BP/255.0, max(max(color.r,color.g),color.b))) + aftglow.rgb;
//	}
//
//	color = min(color * params.pre_bb, 1.0);
//
//	FragColor = vec4(color, vignette(vTexCoord.xy));

*/

#pragma once

namespace RetroArchNtscShadersPatchyNtscAfterglow0UpdateAfterglow0UpdatePass3ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,30,150,
158,169,15,48,105,181,
195,171,111,9,4,240,
63,168,1,0,0,0,
204,9,0,0,5,0,
0,0,52,0,0,0,
112,6,0,0,164,6,
0,0,216,6,0,0,
48,9,0,0,82,68,
69,70,52,6,0,0,
1,0,0,0,48,1,
0,0,5,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
10,6,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
220,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,245,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,11,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
2,0,0,0,1,0,
0,0,13,0,0,0,
27,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,3,0,0,0,
1,0,0,0,13,0,
0,0,40,1,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,95,65,
102,116,101,114,103,108,
111,119,85,112,100,80,
114,101,95,115,97,109,
112,108,101,114,0,95,
65,102,116,101,114,103,
108,111,119,85,112,100,
95,115,97,109,112,108,
101,114,0,65,102,116,
101,114,103,108,111,119,
85,112,100,80,114,101,
0,65,102,116,101,114,
103,108,111,119,85,112,
100,0,80,117,115,104,
0,171,171,171,40,1,
0,0,20,0,0,0,
72,1,0,0,128,0,
0,0,0,0,0,0,
0,0,0,0,104,4,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,132,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,168,4,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
132,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
188,4,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,132,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,206,4,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,232,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,12,5,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
32,5,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
68,5,0,0,56,0,
0,0,4,0,0,0,
0,0,0,0,32,5,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,78,5,
0,0,60,0,0,0,
4,0,0,0,0,0,
0,0,32,5,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,92,5,0,0,
64,0,0,0,4,0,
0,0,0,0,0,0,
32,5,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
105,5,0,0,68,0,
0,0,4,0,0,0,
0,0,0,0,32,5,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,115,5,
0,0,72,0,0,0,
4,0,0,0,0,0,
0,0,32,5,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,125,5,0,0,
76,0,0,0,4,0,
0,0,0,0,0,0,
32,5,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
135,5,0,0,80,0,
0,0,4,0,0,0,
0,0,0,0,32,5,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,156,5,
0,0,84,0,0,0,
4,0,0,0,2,0,
0,0,32,5,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,170,5,0,0,
88,0,0,0,4,0,
0,0,2,0,0,0,
32,5,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
185,5,0,0,92,0,
0,0,4,0,0,0,
0,0,0,0,32,5,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,195,5,
0,0,96,0,0,0,
4,0,0,0,0,0,
0,0,32,5,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,209,5,0,0,
100,0,0,0,4,0,
0,0,0,0,0,0,
32,5,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
223,5,0,0,104,0,
0,0,4,0,0,0,
0,0,0,0,32,5,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,239,5,
0,0,108,0,0,0,
4,0,0,0,0,0,
0,0,32,5,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,253,5,0,0,
112,0,0,0,4,0,
0,0,0,0,0,0,
32,5,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
122,4,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,224,4,
0,0,112,97,114,97,
109,115,95,84,78,84,
67,0,102,108,111,97,
116,0,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
24,5,0,0,112,97,
114,97,109,115,95,76,
83,0,112,97,114,97,
109,115,95,76,85,84,
76,79,87,0,112,97,
114,97,109,115,95,76,
85,84,66,82,0,112,
97,114,97,109,115,95,
67,80,0,112,97,114,
97,109,115,95,67,83,
0,112,97,114,97,109,
115,95,87,80,0,112,
97,114,97,109,115,95,
119,112,95,115,97,116,
117,114,97,116,105,111,
110,0,112,97,114,97,
109,115,95,65,83,95,
117,112,100,0,112,97,
114,97,109,115,95,115,
97,116,95,117,112,100,
0,112,97,114,97,109,
115,95,66,80,0,112,
97,114,97,109,115,95,
118,105,103,115,116,114,
0,112,97,114,97,109,
115,95,118,105,103,100,
101,102,0,112,97,114,
97,109,115,95,115,101,
103,97,95,102,105,120,
0,112,97,114,97,109,
115,95,112,114,101,95,
98,98,0,112,97,114,
97,109,115,95,99,111,
110,116,114,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,171,171,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,80,2,
0,0,80,0,0,0,
148,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,6,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
90,0,0,3,0,96,
16,0,3,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
3,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
0,0,0,10,114,0,
16,0,1,0,0,0,
70,2,16,0,0,0,
0,0,2,64,0,0,
10,215,35,60,10,215,
35,60,10,215,35,60,
0,0,0,0,47,0,
0,5,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
56,0,0,8,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,166,138,32,0,
1,0,0,0,5,0,
0,0,25,0,0,5,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,16,0,
0,7,130,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,68,0,0,5,
130,0,16,0,1,0,
0,0,58,0,16,0,
1,0,0,0,56,0,
0,7,114,0,16,0,
1,0,0,0,246,15,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,0,0,0,8,
130,0,16,0,0,0,
0,0,58,0,16,128,
65,0,0,0,0,0,
0,0,1,64,0,0,
0,0,128,63,16,0,
0,7,18,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,75,0,0,5,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,56,0,
0,8,34,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,5,0,0,0,
56,0,0,7,226,0,
16,0,0,0,0,0,
86,5,16,0,0,0,
0,0,6,9,16,0,
1,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
50,0,0,9,114,32,
16,0,0,0,0,0,
150,7,16,0,0,0,
0,0,6,0,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
54,0,0,5,130,32,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,62,0,0,1,
83,84,65,84,148,0,
0,0,17,0,0,0,
2,0,0,0,0,0,
0,0,2,0,0,0,
13,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};

}

namespace RetroArch
{
class NtscShadersPatchyNtscAfterglow0UpdateAfterglow0UpdatePass3ShaderDef : public ShaderDef
{
public:
	NtscShadersPatchyNtscAfterglow0UpdateAfterglow0UpdatePass3ShaderDef() : ShaderDef{}
	{
		Name = "afterglow0-update-pass3";
		VertexByteCode = RetroArchNtscShadersPatchyNtscAfterglow0UpdateAfterglow0UpdatePass3ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchNtscShadersPatchyNtscAfterglow0UpdateAfterglow0UpdatePass3ShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchNtscShadersPatchyNtscAfterglow0UpdateAfterglow0UpdatePass3ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchNtscShadersPatchyNtscAfterglow0UpdateAfterglow0UpdatePass3ShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("AS_upd", -1, 84, 4, 0.000000f, 0.600000f, 0.200000f, 0.010000f, "Afterglow Strength"));
		Params.push_back(ShaderParam("sat_upd", -1, 88, 4, 0.000000f, 1.000000f, 0.500000f, 0.010000f, "Afterglow saturation"));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("TNTC", -1, 52, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("LS", -1, 56, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("LUTLOW", -1, 60, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("LUTBR", -1, 64, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("CP", -1, 68, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("CS", -1, 72, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("WP", -1, 76, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("wp_saturation", -1, 80, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("BP", -1, 92, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("vigstr", -1, 96, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("vigdef", -1, 100, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("sega_fix", -1, 104, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("pre_bb", -1, 108, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("contr", -1, 112, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("AfterglowUpdPre", 2));
		Samplers.push_back(ShaderSampler("AfterglowUpd", 3));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
